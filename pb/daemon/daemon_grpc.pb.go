// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: daemon.proto

package daemon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	defs "qst-ext-appsearcher-go/pb/defs"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MainInteractClient is the client API for MainInteract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainInteractClient interface {
	SetUp(ctx context.Context, in *defs.Empty, opts ...grpc.CallOption) (*SetUpResult, error)
	GetConfig(ctx context.Context, in *defs.Empty, opts ...grpc.CallOption) (*ConfigResult, error)
	SetConfig(ctx context.Context, in *ConfigHint, opts ...grpc.CallOption) (*defs.MResult, error)
	GetExtAddr(ctx context.Context, in *Prompt, opts ...grpc.CallOption) (*ExtAddrResult, error)
}

type mainInteractClient struct {
	cc grpc.ClientConnInterface
}

func NewMainInteractClient(cc grpc.ClientConnInterface) MainInteractClient {
	return &mainInteractClient{cc}
}

func (c *mainInteractClient) SetUp(ctx context.Context, in *defs.Empty, opts ...grpc.CallOption) (*SetUpResult, error) {
	out := new(SetUpResult)
	err := c.cc.Invoke(ctx, "/daemon.MainInteract/SetUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainInteractClient) GetConfig(ctx context.Context, in *defs.Empty, opts ...grpc.CallOption) (*ConfigResult, error) {
	out := new(ConfigResult)
	err := c.cc.Invoke(ctx, "/daemon.MainInteract/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainInteractClient) SetConfig(ctx context.Context, in *ConfigHint, opts ...grpc.CallOption) (*defs.MResult, error) {
	out := new(defs.MResult)
	err := c.cc.Invoke(ctx, "/daemon.MainInteract/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainInteractClient) GetExtAddr(ctx context.Context, in *Prompt, opts ...grpc.CallOption) (*ExtAddrResult, error) {
	out := new(ExtAddrResult)
	err := c.cc.Invoke(ctx, "/daemon.MainInteract/GetExtAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainInteractServer is the server API for MainInteract service.
// All implementations must embed UnimplementedMainInteractServer
// for forward compatibility
type MainInteractServer interface {
	SetUp(context.Context, *defs.Empty) (*SetUpResult, error)
	GetConfig(context.Context, *defs.Empty) (*ConfigResult, error)
	SetConfig(context.Context, *ConfigHint) (*defs.MResult, error)
	GetExtAddr(context.Context, *Prompt) (*ExtAddrResult, error)
	mustEmbedUnimplementedMainInteractServer()
}

// UnimplementedMainInteractServer must be embedded to have forward compatible implementations.
type UnimplementedMainInteractServer struct {
}

func (UnimplementedMainInteractServer) SetUp(context.Context, *defs.Empty) (*SetUpResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUp not implemented")
}
func (UnimplementedMainInteractServer) GetConfig(context.Context, *defs.Empty) (*ConfigResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedMainInteractServer) SetConfig(context.Context, *ConfigHint) (*defs.MResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedMainInteractServer) GetExtAddr(context.Context, *Prompt) (*ExtAddrResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtAddr not implemented")
}
func (UnimplementedMainInteractServer) mustEmbedUnimplementedMainInteractServer() {}

// UnsafeMainInteractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MainInteractServer will
// result in compilation errors.
type UnsafeMainInteractServer interface {
	mustEmbedUnimplementedMainInteractServer()
}

func RegisterMainInteractServer(s grpc.ServiceRegistrar, srv MainInteractServer) {
	s.RegisterService(&MainInteract_ServiceDesc, srv)
}

func _MainInteract_SetUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(defs.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainInteractServer).SetUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.MainInteract/SetUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainInteractServer).SetUp(ctx, req.(*defs.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainInteract_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(defs.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainInteractServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.MainInteract/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainInteractServer).GetConfig(ctx, req.(*defs.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainInteract_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigHint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainInteractServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.MainInteract/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainInteractServer).SetConfig(ctx, req.(*ConfigHint))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainInteract_GetExtAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prompt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainInteractServer).GetExtAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.MainInteract/GetExtAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainInteractServer).GetExtAddr(ctx, req.(*Prompt))
	}
	return interceptor(ctx, in, info, handler)
}

// MainInteract_ServiceDesc is the grpc.ServiceDesc for MainInteract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MainInteract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daemon.MainInteract",
	HandlerType: (*MainInteractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUp",
			Handler:    _MainInteract_SetUp_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _MainInteract_GetConfig_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _MainInteract_SetConfig_Handler,
		},
		{
			MethodName: "GetExtAddr",
			Handler:    _MainInteract_GetExtAddr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daemon.proto",
}
