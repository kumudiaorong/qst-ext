// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: extension.proto

package extension

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	defs "qst-ext-appsearcher-go/pb/defs"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExtInteractClient is the client API for ExtInteract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtInteractClient interface {
	Search(ctx context.Context, in *Input, opts ...grpc.CallOption) (*SearchResult, error)
	Submit(ctx context.Context, in *SubmitHint, opts ...grpc.CallOption) (*defs.MResult, error)
}

type extInteractClient struct {
	cc grpc.ClientConnInterface
}

func NewExtInteractClient(cc grpc.ClientConnInterface) ExtInteractClient {
	return &extInteractClient{cc}
}

func (c *extInteractClient) Search(ctx context.Context, in *Input, opts ...grpc.CallOption) (*SearchResult, error) {
	out := new(SearchResult)
	err := c.cc.Invoke(ctx, "/ext.ExtInteract/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extInteractClient) Submit(ctx context.Context, in *SubmitHint, opts ...grpc.CallOption) (*defs.MResult, error) {
	out := new(defs.MResult)
	err := c.cc.Invoke(ctx, "/ext.ExtInteract/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtInteractServer is the server API for ExtInteract service.
// All implementations must embed UnimplementedExtInteractServer
// for forward compatibility
type ExtInteractServer interface {
	Search(context.Context, *Input) (*SearchResult, error)
	Submit(context.Context, *SubmitHint) (*defs.MResult, error)
	mustEmbedUnimplementedExtInteractServer()
}

// UnimplementedExtInteractServer must be embedded to have forward compatible implementations.
type UnimplementedExtInteractServer struct {
}

func (UnimplementedExtInteractServer) Search(context.Context, *Input) (*SearchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedExtInteractServer) Submit(context.Context, *SubmitHint) (*defs.MResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedExtInteractServer) mustEmbedUnimplementedExtInteractServer() {}

// UnsafeExtInteractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtInteractServer will
// result in compilation errors.
type UnsafeExtInteractServer interface {
	mustEmbedUnimplementedExtInteractServer()
}

func RegisterExtInteractServer(s grpc.ServiceRegistrar, srv ExtInteractServer) {
	s.RegisterService(&ExtInteract_ServiceDesc, srv)
}

func _ExtInteract_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtInteractServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.ExtInteract/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtInteractServer).Search(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtInteract_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitHint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtInteractServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.ExtInteract/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtInteractServer).Submit(ctx, req.(*SubmitHint))
	}
	return interceptor(ctx, in, info, handler)
}

// ExtInteract_ServiceDesc is the grpc.ServiceDesc for ExtInteract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtInteract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ext.ExtInteract",
	HandlerType: (*ExtInteractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _ExtInteract_Search_Handler,
		},
		{
			MethodName: "Submit",
			Handler:    _ExtInteract_Submit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "extension.proto",
}
